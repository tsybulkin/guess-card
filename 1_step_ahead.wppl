
var pick_card = function(cards){
	var card = cards[randomInteger(cards.length)];
	return [card, filter(function(c){return c!=card;},cards)];
}

var rnd_agent = function(my_index,state){
	var my_cards = state.cards[my_index];
	return pick_card(my_cards);
}

var choose_card = function(cnt,i,my_cards,remaining_cards){
	var card = my_cards[i];
	var c = (filter(function(x){return x==card;},remaining_cards).length);
	if (c == cnt) { return card;}
	else { if (i==my_cards.length-1) {return choose_card(cnt+1,0,my_cards,remaining_cards);}
			else { return choose_card(cnt,i+1,my_cards,remaining_cards); } }
}

var c_agent = function(my_index,state){
	var rem_cards = state.cards;
	//console.log(["rem_cards:",rem_cards]);
	var my_cards = rem_cards[my_index];
	var N = rem_cards.length;
	var next_rem_cards = reduce(function(i,acc){
		if (i==my_index){return acc;}
		else {return acc.concat(rem_cards[i]);}
	},[],_.range(N));
	var c = choose_card(0,0,sort(my_cards,gt),next_rem_cards);
	return [c, filter(function(x){return c!=x;},my_cards)];
};

// -------------------------------------------------------------

var movePrior = dp.cache(function(i,state){
	var my_cards = (state.cards)[i];
	var N = my_cards.length;

	return Infer({ method: 'enumerate', maxExecutions:20 }, function(){
    var move = my_cards[randomInteger(N)];
    return move;
  });
});

   
var pinf_agent = function(my_index,state){
	var c = sample(act(state,my_index));
	//console.log("Never");
	var my_cards = state.cards[my_index];
	return [c, filter(function(x){return c!=x;}, my_cards)];
};

var transition = function(state,move,my_index) {
	var N = agents_list.length;

	var table_n_hands = map(function (i) { 
		if (i != my_index) {
			var f = (agents_list[i]);
			//return f(i,state);}     // if we know the strategy of the c-agent
			return rnd_agent(i,state);}  // if we do not know the strategy of c-agent
		else {
			var my_cards = state.cards[my_index];
			return [move, filter(function(x){return move!=x;}, my_cards)];}
		}, _.range(N));
	var table = map(function(i) {return table_n_hands[i][0] },_.range(N));
	var hands = map(function(i) {return table_n_hands[i][1] },_.range(N));
	var new_scores = score_round(table);
	var new_scores = map(function(i) {return state.score[i] + new_scores[i]},_.range(N));
	var next_state = {score:new_scores, cards:hands};
	
    return {state:next_state, table:table};
};

var utility = function(state,move,next_state, player, scores) {
	var score = scores[player];
	return score - move;
};

var act = dp.cache(function(state, player) {
	//console.log(["state&player:", state,player]);
	return Infer({ method: 'enumerate',maxExecutions:1000}, function(){
		var move = sample(movePrior(player, state));
		//console.log(["Move:", move]);
		var eu = expectation(Infer({ method: 'enumerate',maxExecutions:500}, function(){
		var s_n_t = transition(state,move,player);
		//console.log(["s_n_t:", s_n_t]);
		var scores = score_round(s_n_t.table);
		return utility(state,move,s_n_t.state,player,scores);
    }));
    factor(eu);    
    return move;
  });
});
// -------------------------------------------------------------


var agents_list = [c_agent,pinf_agent,rnd_agent, rnd_agent, rnd_agent];


var score_round = function(table){	
	var N = table.length;
	var scores = map(function (i) { 
		if (any(function (k){return (i!=k && table[i] == table[k]);},_.range(N))) {return 0;}
		else {return table[i];}
		}, _.range(N));
	return scores;
};

var new_game = function (agents_list){
	var N = agents_list.length;
	var init_score = map(function (i){return 0;}, _.range(N));
	var init_cards = map(function (i){return _.range(1,N+1)}, _.range(N));
	return game({score:init_score, cards:init_cards},agents_list);
};

var game = function(state, agents_list){
	var N = agents_list.length;

	var table_n_hands = map(function (i) { var f = (agents_list[i]);
			return f(i,state)}, _.range(N));
	var table = map(function(i) {return table_n_hands[i][0] },_.range(N));
	var hands = map(function(i) {return table_n_hands[i][1] },_.range(N));
	var round_scores = score_round(table);
	console.log(["round:", table]);
	console.log(["score:",round_scores]);
	console.log("");
	
	var new_scores = map(function(i) {return state.score[i] + round_scores[i]},_.range(N));
	if (hands[0].length == 0) { return new_scores;}
//		var s_max = reduce(function(s,c_max){s > c_max ? s:c_max},0,new_scores);
//		return map(function(s){s==s_max ? 1:0},new_scores);}
	return game({score:new_scores, cards:hands}, agents_list);
}



//new_game(agents_list)

var run = function (k){
	var N = agents_list.length;
	return reduce(function(res,acc){
		return T.add(acc,Vector(new_game(agents_list)));
	}, zeros([N,1]), _.range(k))
}

run(100)


