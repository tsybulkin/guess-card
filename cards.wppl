
var pick_card = function(cards){
	var card = cards[randomInteger(cards.length)];
	return [card, filter(function(c){return c!=card;},cards)];
}

var rnd_agent = function(my_index, all_cards){
	//console.log(["inside", my_index, all_cards]);
	var my_cards = all_cards[my_index];
	return pick_card(my_cards);
}

var choose_card = function(cnt,i,my_cards,remaining_cards){
	var card = my_cards[i];
	var c = (filter(function(x){return x==card;},remaining_cards).length);
	if (c == cnt) { return card;}
	else { if (i==my_cards.length-1) {return choose_card(cnt+1,0,my_cards,remaining_cards);}
			else { return choose_card(cnt,i+1,my_cards,remaining_cards); } }
}

var c_agent = function(my_index,all_cards){
	var my_cards = all_cards[my_index];
	var N = all_cards.length;
	var remaining_cards = reduce(function(i,acc){
		if (i==my_index){return acc;}
		else {return acc.concat(all_cards[i]);}
	},[],_.range(N));
	//console.log(remaining_cards);
	var c = choose_card(0,0,sort(my_cards),remaining_cards);
	//console.log(["our choice:",c]);
	return [c, filter(function(x){return c!=x;},my_cards)];
}

var agents_list = [c_agent,rnd_agent,rnd_agent, rnd_agent];


var score_round = function(table){	
	var N = table.length;
	var scores = map(function (i) { 
		if (any(function (k){return (i!=k && table[i] == table[k]);},_.range(N))) {return 0;}
		else {return table[i];}
		}, _.range(N));

	//console.log(["scores:",scores]);
	return scores;
};

var new_game = function (agents_list){
	var N = agents_list.length;
	var init_score = map(function (i){return 0;}, _.range(N));
	var init_cards = map(function (i){return _.range(1,N+1)}, _.range(N));
	return game({score:init_score, cards:init_cards},agents_list);
};

var game = function(state, agents_list){
	var N = agents_list.length;

	var table_n_hands = map(function (i) { var f = (agents_list[i]);
			return f(i,state.cards)}, _.range(N));
	
	//console.log(table_n_hands);
	var table = map(function(i) {return table_n_hands[i][0] },_.range(N));
	var hands = map(function(i) {return table_n_hands[i][1] },_.range(N));
	var new_scores = score_round(table);
	var new_scores = map(function(i) {return state.score[i] + new_scores[i]},_.range(N));
	
	if (hands[0].length == 0) {
		var s_max = reduce(function(s,c_max){s > c_max ? s:c_max},0,new_scores);
		return map(function(s){s==s_max ? 1:0},new_scores);}
	return game({score:new_scores, cards:hands}, agents_list);
}

//new_game(agents_list)

var run = function (k){
	var N = agents_list.length;
	return reduce(function(res,acc){
		return T.add(acc,Vector(new_game(agents_list)));
	}, zeros([N,1]), _.range(k))
}

run(1000)


